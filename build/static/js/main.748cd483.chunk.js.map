{"version":3,"sources":["components/Note.jsx","components/Notification.jsx","components/Footer.jsx","services/notes.js","App.jsx","index.jsx"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","fontSize","baseUrl","axios","get","then","resp","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","i","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","target","value","onChange","placeholder","type","disabled","length","ReactDOM","render","document","getElementById"],"mappings":"oMAYeA,EAVF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACI,qBAAIC,UAAU,OAAd,UACKJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,QCGjCK,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAGJ,qBAAKJ,UAAU,QAAf,SAAwBI,KCUpBC,EAfA,WAOX,OACI,sBAAKC,MAPW,CAGhBC,SAAU,IAIV,UACI,uBACA,yD,gBCXNC,EAAU,aAqBD,EAbA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAACC,GAAD,OAAUA,EAAKC,SAWxB,EATA,SAACC,GAEZ,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAACC,GAAD,OAAUA,EAAKC,SAOxB,EALA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAACC,GAAD,OAAUA,EAAKC,SC2ExBK,G,MAvFH,WACR,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,MAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAIAC,qBAAU,WACNC,IAAqBlB,MAAK,SAACmB,GACvBT,EAASS,QAEd,IAEH,IA8CMC,EAAcP,EAAUJ,EAAQA,EAAMY,QAAO,SAACpC,GAAD,OAAUA,EAAKG,aAGlE,OACI,gCACI,uCACA,cAAC,EAAD,CAAcK,QAASsB,IACvB,8BACI,yBAAQxB,QAAS,kBAAMuB,GAAYD,IAAnC,kBAAmDA,EAAU,YAAc,WAE/E,6BACKO,EAAYE,KAAI,SAACrC,EAAMsC,GAAP,OACb,cAAC,EAAD,CAAoBtC,KAAMA,EAAMC,iBAAkB,kBArCvC,SAACmB,GACxB,IAAMpB,EAAOwB,EAAMe,MAAK,SAACC,GAAD,OAAOA,EAAEpB,KAAOA,KAClCqB,EAAW,2BAAQzC,GAAR,IAAcG,WAAYH,EAAKG,YAEhD8B,EACYb,EAAIqB,GACX1B,MAAK,SAAC2B,GACHjB,EAASD,EAAMa,KAAI,SAACrC,GAAD,OAAWA,EAAKoB,KAAOA,EAAKsB,EAAe1C,SAEjE2C,OAAM,SAACC,GACJb,EAAgB,aAAD,OAAc/B,EAAKK,QAAnB,uCACfwC,YAAW,WACPd,EAAgB,QACjB,KACHN,EAASD,EAAMY,QAAO,SAACI,GAAD,OAAOA,EAAEpB,KAAOA,SAuBsB0B,CAAmB9C,EAAKoB,MAArEpB,EAAKoB,SAGxB,uBACA,uBAAM2B,SA9DE,SAACC,GACbA,EAAMC,iBAEN,IAAMC,EAAa,CACf7C,QAASqB,EACTyB,MAAM,IAAIC,MAAOC,cACjBlD,UAAWmD,KAAKC,SAAW,IAM/BtB,EAAmBiB,GAAYnC,MAAK,SAAC0B,GACjChB,EAASD,EAAMgC,OAAOf,IACtBd,EAAW,OAIfqB,EAAMS,OAAO,GAAGC,MAAQ,IA4CpB,UACI,uBAAOC,SAvBM,SAACX,GAEtBrB,EAAWqB,EAAMS,OAAOC,QAqBmBE,YAAa,2BAChD,wBAAQC,KAAK,SAASC,SAAUpC,EAAQqC,QAAU,EAAlD,yBAIJ,cAAC,EAAD,SCrFZC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.748cd483.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important ? \"make not important\" : \"make important\";\n    return (\n        <li className='note'>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    );\n};\n\nexport default Note;\n","import React from \"react\";\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null;\n    }\n\n    return <div className='error'>{message}</div>;\n};\n\nexport default Notification;\n","import React from \"react\";\n\nconst Footer = () => {\n    const footerStyle = {\n        // color: \"green\",\n        // fontStyle: \"italic\",\n        fontSize: 16,\n    };\n\n    return (\n        <div style={footerStyle}>\n            <br />\n            <p>Note app. c. 2021 :3</p>\n        </div>\n    );\n};\n\nexport default Footer;\n","import axios from \"axios\";\nconst baseUrl = \"/api/notes\"; // relative url\n/**\n * The relative url will work when running the express server in development mode,\n * and having it serve the built app...\n *\n * However it will break when testing the frontend by itself (with \"npm run start\")\n */\n\nconst getAll = () => {\n    const request = axios.get(baseUrl);\n    return request.then((resp) => resp.data);\n};\nconst create = (newObject) => {\n    const request = axios.post(baseUrl, newObject);\n    return request.then((resp) => resp.data);\n};\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject);\n    return request.then((resp) => resp.data);\n};\n\nexport default { getAll, create, update };\n","import React, { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport Notification from \"./components/Notification\";\nimport Footer from \"./components/Footer\";\nimport noteService from \"./services/notes\";\nimport \"./index.css\";\n\nconst App = () => {\n    const [notes, setNotes] = useState([]);\n    const [newNote, setNewNote] = useState(\"\");\n    const [showAll, setShowAll] = useState(false);\n    const [errorMessage, setErrorMessage] = useState(null);\n\n    //// Handle server-side data\n\n    useEffect(() => {\n        noteService.getAll().then((initialNotes) => {\n            setNotes(initialNotes);\n        });\n    }, []);\n\n    const addNote = (event) => {\n        event.preventDefault();\n\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() < 0.5,\n            // we will let the server generate the id for this item\n        };\n\n        // axios.post(\"http://localhost:3001/notes\", noteObject)\n\n        noteService.create(noteObject).then((changedNote) => {\n            setNotes(notes.concat(changedNote));\n            setNewNote(\"\");\n        });\n\n        // Reset the value in the text input area\n        event.target[0].value = \"\";\n    };\n\n    const toggleImportanceOf = (id) => {\n        const note = notes.find((n) => n.id === id);\n        const changedNote = { ...note, important: !note.important };\n\n        noteService\n            .update(id, changedNote)\n            .then((returnedNote) => {\n                setNotes(notes.map((note) => (note.id === id ? returnedNote : note)));\n            })\n            .catch((error) => {\n                setErrorMessage(`The note '${note.content}' was already removed from server!`);\n                setTimeout(() => {\n                    setErrorMessage(null);\n                }, 5000);\n                setNotes(notes.filter((n) => n.id !== id));\n            });\n    };\n\n    /// Handle internal State\n    const handleNoteChange = (event) => {\n        // console.log(event.target.value);\n        setNewNote(event.target.value);\n    };\n\n    // console.log(\"notes: \", notes);\n    const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n\n    /// JSX\n    return (\n        <div>\n            <h1>Notes</h1>\n            <Notification message={errorMessage} />\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>show {showAll ? \"important\" : \"all\"}</button>\n            </div>\n            <ul>\n                {notesToShow.map((note, i) => (\n                    <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)} />\n                ))}\n            </ul>\n            <hr />\n            <form onSubmit={addNote}>\n                <input onChange={handleNoteChange} placeholder={\"Add a new note here...\"} />\n                <button type='submit' disabled={newNote.length <= 0}>\n                    Add Note\n                </button>\n            </form>\n            <Footer />\n        </div>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}